{"/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/test.js":"/* istanbul instrument in package npmtest_generator_openveo_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/lib.npmtest_generator_openveo_plugin.js":"/* istanbul instrument in package npmtest_generator_openveo_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_openveo_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_openveo_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-openveo-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_openveo_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_openveo_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_openveo_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_openveo_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_openveo_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_openveo_plugin.__dirname + '/lib.npmtest_generator_openveo_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/entity/index.js":"'use strict';\n\nvar yeoman = require('yeoman-generator');\nvar chalk = require('chalk');\n\nvar prompting = require('./src/prompting');\nvar writing = require('./src/writing');\n\nmodule.exports = yeoman.Base.extend({\n  initializing: function() {\n    if (!this.properties) {\n      this.properties = {\n        templated: {\n          entities: []\n        },\n        url: ''\n      };\n    }\n  },\n\n  prompting: prompting,\n\n  writing: writing,\n\n  install: function() {\n  },\n\n  end: function() {\n    this.log(chalk.green('\\n Your entities has been successfully created! \\n'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/entity/src/prompting.js":"'use strict';\n\nvar chalk = require('chalk');\nvar yosay = require('yosay');\nvar _ = require('lodash');\nvar fs = require('fs');\n\nmodule.exports = function() {\n\n  var callback = this.async();\n  var URL = 'node_modules/@openveo/';\n\n  // Set plugin name from plugin generator\n  if (this.options.plugin) {\n    this.properties.templated.plugin = _.camelCase(this.options.plugin);\n    this.properties.templated.Plugin = _.capitalize(_.camelCase(this.options.plugin));\n    this.properties.url = this.destinationPath(URL + this.options.plugin + '/');\n  }\n\n  // Have Yeoman greet the user.\n  this.log(yosay(\n    chalk.red('Welcome!') + '\\n' +\n    chalk.yellow('You\\'re using OpenVeo Plugin Entity Generator')\n  ));\n\n  /**\n   * Check directory exists\n   */\n  function directoryExist(directory) {\n    try {\n      var stats = fs.statSync(directory);\n      if (stats.isDirectory) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Prompts question to generate a new entity\n   */\n  function generateEntity(callback) {\n    var prompts = [{\n      type: 'input',\n      name: 'entity',\n      message: 'What name do you want to give to your new entity? (Press Enter to exit)'\n    }];\n\n    if (!this.options.plugin && !this.properties.url) {\n      prompts.unshift({\n        type: 'input',\n        name: 'plugin',\n        message: 'Please select for which plugin you want add entities?'\n      });\n    }\n\n    this.prompt(prompts).then(function(answers) {\n\n      // Verify plugin exists\n      if (!answers.plugin && !this.options.plugin && !this.properties.url) {\n        this.env.error(chalk.red('You must provide a plugin name!'));\n      } else if (!directoryExist(this.destinationPath(URL + answers.plugin + '/')) &&\n       !this.options.plugin && !this.properties.url) {\n        this.env.error(chalk.red('The plugin \"' + answers.plugin + '\" does not exists!'));\n      }\n\n      if (!this.properties.templated.plugin) {\n        this.properties.templated.plugin = _.camelCase(_.lowerCase(answers.plugin));\n        this.properties.templated.Plugin = _.capitalize(_.camelCase(answers.plugin));\n      }\n\n      if (!this.properties.url) {\n        this.properties.url = this.destinationPath(URL + answers.plugin + '/');\n      }\n\n      // Verify entity does not exist\n      if (this.fs.exists(this.properties.url + 'app/server/controllers/' +\n        _.upperFirst(_.camelCase(answers.entity)) + 'Controller.js')) {\n        this.log(chalk.red('The plugin entity \"' + _.capitalize(answers.entity) + '\" already exists! \\n'));\n        answers.entity = null;\n        generateEntity.call(this, callback);\n      } else if (!answers.entity) {\n        callback();\n      } else {\n        this.properties.answers = answers;\n\n        var entity = {\n          entity: _.camelCase(_.lowerCase(answers.entity)),\n          Entity: _.upperFirst(_.camelCase(answers.entity)),\n          ENTITY: _.toUpper(_.snakeCase(answers.entity))\n        };\n\n        this.properties.templated.entities.push(entity);\n\n        generateEntity.call(this, callback);\n      }\n\n    }.bind(this));\n  }\n\n  generateEntity.call(this, callback);\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/entity/src/writing.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\n\nvar config = require('../config/files');\n\nvar UNDERSCORE = '_';\nvar PATTERN_LOWERCASE = /\\{\\{entity\\}\\}/;\nvar PATTERN_CAPITALIZE = /\\{\\{Entity\\}\\}/;\nvar PATTERN_URL = /app\\/client\\/admin\\/js\\/ov/;\n\nmodule.exports = function() {\n\n  var entities = this.properties.templated.entities;\n  var pluginCapitalize = this.properties.templated.Plugin;\n  var URL_UPDATED = 'app/client/admin/js/ov' + pluginCapitalize;\n  var conf = require(this.properties.url + 'conf');\n\n  // Remove conf.js to avoid conflict\n  fs.unlinkSync(this.properties.url + 'conf.js');\n\n  for (var i = 0; i < entities.length; i++) {\n\n    this.properties.templated.ENTITY = entities[i].ENTITY;\n    var entityLowercase = this.properties.templated.entity = entities[i].entity;\n    var entityCapitalize = this.properties.templated.Entity = entities[i].Entity;\n\n    var entity = function(dest) {\n      dest = dest.replace(PATTERN_LOWERCASE, entityLowercase);\n      dest = dest.replace(PATTERN_CAPITALIZE, entityCapitalize);\n\n      // Update Url\n      dest = dest.replace(PATTERN_URL, URL_UPDATED);\n\n      return dest;\n    };\n\n    var copyFile = function(source, destination) {\n      destination = ('string' === typeof destination) ? destination : source;\n      this.fs.copy(\n        this.templatePath(source),\n        entity(this.properties.url + destination)\n      );\n    }.bind(this);\n\n    var copyTemplatedFile = function(file) {\n      var basename = path.basename(file);\n      var prefixed = file.replace(basename, UNDERSCORE + basename);\n\n      this.fs.copyTpl(\n        this.templatePath(prefixed),\n        entity(this.properties.url + file),\n        this.properties.templated\n      );\n    }.bind(this);\n\n    var updateConf = function() {\n      conf.entities[entityLowercase + 's'] = 'app/server/controllers/' + entityCapitalize + 'Controller';\n\n      this.properties.templated.conf = JSON.stringify(conf, null, 2).replace(/\\\"([^(\\\"|\\s)\"]+)\\\":/g, '$1:')\n      .replace(/\"/g, '\\'');\n\n      copyTemplatedFile('conf.js');\n\n    }.bind(this);\n\n    config.src.forEach(copyFile);\n    config.templated.forEach(copyTemplatedFile);\n    updateConf();\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/config/paths.js":"'use strict';\n\nmodule.exports = {\n  project: {\n    app: '<%= project.app %>',\n    be: '<%= project.be %>',\n    front: '<%= project.front %>',\n    beJS: '<%= project.beJS %>',\n    frontJS: '<%= project.frontJS %>',\n    sass: '<%= project.sass %>',\n    beAssets: '<%= project.beAssets %>',\n    beCSSAssets: '<%= project.beCSSAssets %>',\n    beJSAssets: '<%= project.beJSAssets %>',\n    uglify: '<%= project.uglify %>'\n  },\n  pkg: {\n    version: '<%= pkg.version %>'\n  },\n  openveo: 'node_modules/@openveo/'\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/src/configuring.js":"'use strict';\n\nvar chalk = require('chalk');\nvar fs = require('fs');\nvar paths = require('../config/paths');\n\nmodule.exports = function() {\n\n  var self = this;\n\n  // Define url for the OpenVeo plugin\n  this.properties.url = this.destinationPath(paths.openveo + this.properties.templated.plugin + '/');\n\n  // Create plugin folder\n  fs.mkdir(this.properties.url, function(err) {\n    if (err && err.errno === -17) {\n      self.env.error(chalk.red('The \"' + self.properties.templated.Plugin + '\" plugin already exist. \\n'));\n    } else if (err) {\n      self.env.error(chalk.red(err));\n    }\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/src/end.js":"'use strict';\n\nvar chalk = require('chalk');\nvar fs = require('fs');\n\nvar paths = require('../config/paths');\n\nmodule.exports = function() {\n\n  var rmdir = function(dirPath) {\n    var files;\n    try {\n      files = fs.readdirSync(dirPath);\n    } catch (e) {\n      return;\n    }\n    if (files.length > 0) {\n      for (var i = 0; i < files.length; i++) {\n        var filePath = dirPath + '/' + files[i];\n        if (fs.statSync(filePath).isFile()) {\n          fs.unlinkSync(filePath);\n        } else {\n          rmdir(filePath);\n        }\n      }\n    }\n    fs.rmdirSync(dirPath);\n  };\n\n  rmdir(paths.openveo);\n\n  this.log(chalk.green('\\n Your plugin has been successfully installed! \\n'));\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/src/install.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar config = require('../config/files');\n\nmodule.exports = function() {\n\n  var pluginName = this.properties.templated.Plugin;\n  var self = this;\n\n  config.folders.forEach(function(folder) {\n    var basename = path.basename(folder);\n    var renamed = folder.replace(basename, basename + pluginName);\n\n    fs.renameSync(self.properties.url + '/' + folder, self.properties.url + '/' + renamed);\n  });\n\n  // create folders\n  fs.mkdirSync(this.properties.url + 'app/server/controllers');\n  fs.mkdirSync(this.properties.url + 'app/server/models');\n  fs.mkdirSync(this.properties.url + 'app/server/providers');\n\n  // Call sub-generator\n  if (this.properties.answers.entityGenerator) {\n    this.composeWith('openveo-plugin:entity', {\n      options: {\n        plugin: this.properties.templated.plugin\n      }\n    });\n  }\n\n  // Change folder to install dependencies\n  process.chdir(this.properties.url);\n\n  this.installDependencies({\n    skipInstall: this.options['skip-install']\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/src/prompting.js":"'use strict';\n\nvar chalk = require('chalk');\nvar yosay = require('yosay');\nvar _ = require('lodash');\nvar paths = require('../config/paths');\n\nmodule.exports = function() {\n\n  // Have Yeoman greet the user.\n  this.log(yosay(\n    chalk.red('Welcome!') + '\\n' +\n    chalk.yellow('You\\'re using OpenVeo Plugin Generator!')\n  ));\n\n  // Define all questions asked to the user\n  var prompts = [{\n    type: 'input',\n    name: 'plugin',\n    message: 'What name do you want to give to your OpenVeo plugin?'\n  },\n    {\n      when: function(response) {\n        return response.plugin;\n      },\n      type: 'confirm',\n      name: 'entityGenerator',\n      message: 'Would you like to generate an entity?',\n      default: true\n    }\n  ];\n\n  return this.prompt(prompts).then(function(answers) {\n    if (!answers.plugin) {\n      this.env.error(chalk.red('You must provide a plugin name!'));\n    }\n    this.properties.answers = answers;\n\n    this.properties.templated.plugin = _.camelCase(_.lowerCase(answers.plugin));\n    this.properties.templated.Plugin = _.upperFirst(_.camelCase(answers.plugin));\n    this.properties.templated.PLUGIN = _.toUpper(_.snakeCase(answers.plugin));\n\n    this.properties.templated.project = paths.project;\n    this.properties.templated.pkg = paths.pkg;\n\n  }.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/src/writing.js":"'use strict';\n\nvar path = require('path');\n\nvar config = require('../config/files');\n\nvar UNDERSCORE = '_';\nvar PATTERN_LOWERCASE = /\\{\\{plugin\\}\\}/;\nvar PATTERN_CAPITALIZE = /\\{\\{Plugin\\}\\}/;\n\nmodule.exports = function() {\n\n  var pluginLowercase = this.properties.templated.plugin;\n  var pluginCapitalize = this.properties.templated.Plugin;\n\n  var plugin = function(dest) {\n    dest = dest.replace(PATTERN_LOWERCASE, pluginLowercase);\n    dest = dest.replace(PATTERN_CAPITALIZE, pluginCapitalize);\n\n    return dest;\n  };\n\n  var copyFile = function(source, destination) {\n    destination = ('string' === typeof destination) ? destination : source;\n    this.fs.copy(\n      this.templatePath(source),\n      plugin(this.properties.url + destination)\n    );\n  }.bind(this);\n\n  var copyTemplatedFile = function(file) {\n    var basename = path.basename(file);\n    var prefixed = file.replace(basename, UNDERSCORE + basename);\n\n    this.fs.copyTpl(\n      this.templatePath(prefixed),\n      plugin(this.properties.url + file),\n      this.properties.templated\n    );\n  }.bind(this);\n\n  var copyDotFile = function(file) {\n    var basename = path.basename(file);\n    var prefixed = file.replace(basename, basename.substring(1));\n    copyFile(prefixed, file);\n  };\n\n  config.src.forEach(copyFile);\n  config.tasks.forEach(copyFile);\n  config.templated.forEach(copyTemplatedFile);\n  config.dots.forEach(copyDotFile);\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/templates/_conf.js":"'use strict';\n\nmodule.exports = {\n  routes: {\n    public: {\n    },\n    private: {\n    },\n    ws: {\n    }\n  },\n  entities: {\n  },\n  permissions: [\n    {\n      id: '<%= plugin %>-access-todo-page',\n      name: '<%= PLUGIN %>.PERMISSIONS.ACCESS_TODO_PAGE_NAME'\n    }\n  ],\n  backOffice: {\n    menu: [\n      {\n        weight: -50,\n        label: '<%= PLUGIN %>.MENU.<%= PLUGIN %>',\n        subMenu: [\n          {\n            label: '<%= PLUGIN %>.MENU.TODO',\n            path: '<%= plugin %>/todo',\n            permission: '<%= plugin %>-access-todo-page'\n          }\n        ]\n      }\n    ],\n    scriptLibFiles: {\n      base: [],\n      dev: [],\n      prod: []\n    },\n    scriptFiles: {\n      base: [],\n      dev: [\n        '/<%= plugin %>/ov<%= Plugin %>/<%= Plugin %>App.js',\n        '/<%= plugin %>/ov<%= Plugin %>/<%= Plugin %>Controller.js',\n        '/<%= plugin %>/ov<%= Plugin %>/<%= Plugin %>Service.js'\n      ],\n      prod: [\n        '/<%= plugin %>/be/js/openveo<%= Plugin %>.js'\n      ]\n    },\n    cssFiles: [\n      '/<%= plugin %>/be/css/<%= plugin %>.css'\n    ]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/templates/_Gruntfile.js":"'use strict';\n\n// Module dependencies\nvar path = require('path');\n\nprocess.root<%= Plugin %> = __dirname;\nprocess.require<%= Plugin %> = function(filePath) {\n  return require(path.normalize(process.root<%= Plugin %> + '/' + filePath));\n};\n\n/**\n * Loads a bunch of grunt configuration files from the given directory.\n *\n * Loaded configurations can be referenced using the configuration file name.\n * For example, if myConf.js describes a property \"test\", it will be accessible\n * using myConf.test.\n *\n * @param String path Path of the directory containing configuration files\n * @return Object The list of configurations indexed by filename without\n * the extension\n */\nfunction loadConfig(path) {\n  var glob = require('glob');\n  var object = {};\n  var key;\n\n  glob.sync('*', {\n    cwd: path\n  }).forEach(function(option) {\n    key = option.replace(/\\.js$/, '');\n    object[key] = require(path + '/' + option);\n  });\n\n  return object;\n}\n\nmodule.exports = function(grunt) {\n\n  var config = {\n    pkg: grunt.file.readJSON('package.json'),\n    env: process.env\n  };\n\n  grunt.initConfig(config);\n  grunt.config.merge(loadConfig('./tasks'));\n\n  grunt.loadNpmTasks('grunt-contrib-compass');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-yuidoc');\n  grunt.loadNpmTasks('grunt-mocha-test');\n  grunt.loadNpmTasks('grunt-karma');\n  grunt.loadNpmTasks('grunt-eslint');\n  grunt.loadNpmTasks('grunt-mkdocs');\n  grunt.loadNpmTasks('grunt-gh-pages');\n  grunt.loadNpmTasks('grunt-rename');\n  grunt.loadNpmTasks('grunt-remove');\n\n  // Listen to changes on SCSS files and generate CSS files\n  grunt.registerTask('default', ['compass:dev', 'watch']);\n\n  // Minify and concat back end AngularJS Javascript files\n  grunt.registerTask('concatPlugin', ['uglify:dist', 'concat:lib', 'concat:js']);\n\n  // Prepare project for production\n  grunt.registerTask('prod', ['compass:dist', 'concatPlugin']);\n\n  // Generate documentation\n  grunt.registerTask('doc', ['remove:doc', 'mkdocs', 'yuidoc', 'rename:doc']);\n\n  // Deploy documentation to github pages\n  grunt.registerTask('deploy-doc', ['doc', 'gh-pages:doc']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/templates/_index.js":"'use strict';\n\n// Module dependencies\nvar path = require('path');\n\n// Set module root directory\nprocess.root<%= Plugin %> = __dirname;\n\n// Define a new method on process object to be able to require\n// a module with a path relative to plugin's root directory\nprocess.require<%= Plugin %> = function(filePath) {\n  return require(path.join(process.root<%= Plugin %>, filePath));\n};\n\n// Expose the BoilerPlugin\nmodule.exports = process.require<%= Plugin %>('app/server/<%= Plugin %>Plugin.js');\n","/home/travis/build/npmtest/node-npmtest-generator-openveo-plugin/node_modules/generator-openveo-plugin/generators/app/templates/_install.js":"'use strict';\n\n// Module dependencies\nvar path = require('path');\nvar fs = require('fs');\nvar os = require('os');\nvar async = require('async');\nvar openVeoAPI = require('@openveo/api');\nvar confDir = path.join(openVeoAPI.fileSystem.getConfDir(), '<%= plugin %>');\n\nvar exit = process.exit;\n\n// Set module root directory\nprocess.root<%= Plugin %> = __dirname;\nprocess.require<%= Plugin %> = function(filePath) {\n  return require(path.join(process.root<%= Plugin %>, filePath));\n};\n\n/**\n * Creates conf directory if it does not exist.\n */\nfunction createConfDir(callback) {\n  openVeoAPI.fileSystem.mkdir(confDir, callback);\n}\n\n/**\n * Creates loggers configuration file if it does not exist.\n */\nfunction createLoggerConf(callback) {\n  var confFile = path.join(confDir, 'loggerConf.json');\n  var defaultPath = path.join(os.tmpdir(), 'openveo', 'logs');\n  var conf = {\n    <%= plugin %>: {\n      fileName: path.join(defaultPath, 'openveo-<%= plugin %>.log').replace(/\\\\/g, '/'),\n      level: 'info',\n      maxFileSize: 1048576,\n      maxFiles: 2\n    }\n  };\n\n  fs.exists(confFile, function(exists) {\n    if (exists) {\n      process.stdout.write(confFile + ' already exists\\n');\n      callback();\n    } else\n      fs.writeFile(confFile, JSON.stringify(conf, null, '\\t'), {encoding: 'utf8'}, callback);\n  });\n}\n\n\n// Launch installation\nasync.series([\n  createConfDir,\n  createLoggerConf\n], function(error, results) {\n  if (error)\n    throw error;\n  else {\n    process.stdout.write('Installation complete');\n    exit();\n  }\n});\n"}